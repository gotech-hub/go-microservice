// Code generated by go generate; DO NOT EDIT.
// Generated constants for collection and field names and filter helpers.

package entity

import (
	"time"

	"go.mongodb.org/mongo-driver/bson"
)

const (
	ColEntity        = "entity"
	FEntityId        = "_id"
	FEntityStatus    = "status"
	FEntityCreatedAt = "created_at"
	FEntityUpdatedAt = "updated_at"
)

// byId filters where _id == value
func byId(value string) bson.M {
	return bson.M{
		FEntityId: value,
	}
}

// byIdNot filters where _id != value
func byIdNot(value string) bson.M {
	return bson.M{
		FEntityId: bson.M{"$ne": value},
	}
}

// byIdIn filters where _id in values
func byIdIn(values []string) bson.M {
	return bson.M{
		FEntityId: bson.M{"$in": values},
	}
}

// byIdNotIn filters where _id not in values
func byIdNotIn(values []string) bson.M {
	return bson.M{
		FEntityId: bson.M{"$nin": values},
	}
}

// byStatus filters where status == value
func byStatus(value string) bson.M {
	return bson.M{
		FEntityStatus: value,
	}
}

// byStatusNot filters where status != value
func byStatusNot(value string) bson.M {
	return bson.M{
		FEntityStatus: bson.M{"$ne": value},
	}
}

// byStatusIn filters where status in values
func byStatusIn(values []string) bson.M {
	return bson.M{
		FEntityStatus: bson.M{"$in": values},
	}
}

// byStatusNotIn filters where status not in values
func byStatusNotIn(values []string) bson.M {
	return bson.M{
		FEntityStatus: bson.M{"$nin": values},
	}
}

// byCreatedAt filters where created_at == value
func byCreatedAt(value time.Time) bson.M {
	return bson.M{
		FEntityCreatedAt: value,
	}
}

// byCreatedAtNot filters where created_at != value
func byCreatedAtNot(value time.Time) bson.M {
	return bson.M{
		FEntityCreatedAt: bson.M{"$ne": value},
	}
}

// byCreatedAtAfter filters where created_at > value
func byCreatedAtAfter(value time.Time) bson.M {
	return bson.M{
		FEntityCreatedAt: bson.M{"$gt": value},
	}
}

// byCreatedAtBefore filters where created_at < value
func byCreatedAtBefore(value time.Time) bson.M {
	return bson.M{
		FEntityCreatedAt: bson.M{"$lt": value},
	}
}

// byCreatedAtAfterAndEqual filters where created_at >= value
func byCreatedAtAfterAndEqual(value time.Time) bson.M {
	return bson.M{
		FEntityCreatedAt: bson.M{"$gte": value},
	}
}

// byCreatedAtBeforeAndEqual filters where created_at <= value
func byCreatedAtBeforeAndEqual(value time.Time) bson.M {
	return bson.M{
		FEntityCreatedAt: bson.M{"$lte": value},
	}
}

// byUpdatedAt filters where updated_at == value
func byUpdatedAt(value time.Time) bson.M {
	return bson.M{
		FEntityUpdatedAt: value,
	}
}

// byUpdatedAtNot filters where updated_at != value
func byUpdatedAtNot(value time.Time) bson.M {
	return bson.M{
		FEntityUpdatedAt: bson.M{"$ne": value},
	}
}

// byUpdatedAtAfter filters where updated_at > value
func byUpdatedAtAfter(value time.Time) bson.M {
	return bson.M{
		FEntityUpdatedAt: bson.M{"$gt": value},
	}
}

// byUpdatedAtBefore filters where updated_at < value
func byUpdatedAtBefore(value time.Time) bson.M {
	return bson.M{
		FEntityUpdatedAt: bson.M{"$lt": value},
	}
}

// byUpdatedAtAfterAndEqual filters where updated_at >= value
func byUpdatedAtAfterAndEqual(value time.Time) bson.M {
	return bson.M{
		FEntityUpdatedAt: bson.M{"$gte": value},
	}
}

// byUpdatedAtBeforeAndEqual filters where updated_at <= value
func byUpdatedAtBeforeAndEqual(value time.Time) bson.M {
	return bson.M{
		FEntityUpdatedAt: bson.M{"$lte": value},
	}
}
